import cv2
import numpy as np
from tkinter import Tk, filedialog, Button, Label, Canvas, messagebox, Scale, HORIZONTAL, StringVar, OptionMenu
from PIL import Image, ImageTk
from sklearn.svm import SVR
from sklearn.preprocessing import StandardScaler

class RiceGrainAnalyzer:
    def _init_(self, master):
        self.master = master
        self.master.title("Rice Grain Analyzer")

        self.load_button = Button(master, text="Load Image", command=self.load_image)
        self.load_button.pack()

        self.canvas = Canvas(master, width=400, height=400)
        self.canvas.pack()

        self.process_button = Button(master, text="Process Image", command=self.process_image, state='disabled')
        self.process_button.pack()

        self.save_button = Button(master, text="Save Image", command=self.save_image, state='disabled')
        self.save_button.pack()

        self.result_label = Label(master, text="")
        self.result_label.pack()

        self.quality_label = Label(master, text="")
        self.quality_label.pack()

        self.threshold_scale_label = Label(master, text="Threshold:")
        self.threshold_scale_label.pack()
        self.threshold_scale = Scale(master, from_=0, to=255, orient=HORIZONTAL)
        self.threshold_scale.set(160)
        self.threshold_scale.pack()

        self.morphology_scale_label = Label(master, text="Morphology Kernel Size:")
        self.morphology_scale_label.pack()
        self.morphology_scale = Scale(master, from_=1, to=20, orient=HORIZONTAL)
        self.morphology_scale.set(5)
        self.morphology_scale.pack()

        self.annotation_color_label = Label(master, text="Annotation Color:")
        self.annotation_color_label.pack()
        self.annotation_color_var = StringVar(master)
        self.annotation_color_var.set("green") 
        self.annotation_color_options = OptionMenu(master, self.annotation_color_var, "red", "green", "blue", "yellow")
        self.annotation_color_options.pack()

        self.img = None
        self.annotated_img = None
        self.markers = None
        self.svm_model = SVR(kernel='linear')
        self.scaler = StandardScaler()

    def load_image(self):
        file_path = filedialog.askopenfilename(filetypes=[("Image Files", ".jpg;.jpeg;*.png")])
        if file_path:
            self.img = cv2.imread(file_path)
            if self.img is None:
                messagebox.showerror("Error", "Unable to load the image")
            else:
                self.display_image(self.img)
                self.process_button.config(state='normal')
                self.save_button.config(state='normal')

    def display_image(self, img):
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        self.annotated_img = img.copy()  
        img = Image.fromarray(img)
        img = ImageTk.PhotoImage(image=img)
        self.canvas.image = img
        self.canvas.create_image(0, 0, anchor='nw', image=img)

    def process_image(self):
        if self.img is not None:
            threshold_value = self.threshold_scale.get()
            kernel_size = self.morphology_scale.get()

            gray = cv2.cvtColor(self.img, cv2.COLOR_BGR2GRAY)
            ret, binary = cv2.threshold(gray, threshold_value, 255, cv2.THRESH_BINARY)

            kernel = np.ones((kernel_size, kernel_size), np.uint8)
            opening = cv2.morphologyEx(binary, cv2.MORPH_OPEN, kernel, iterations=2)
            sure_bg = cv2.dilate(opening, kernel, iterations=3)

            dist_transform = cv2.distanceTransform(opening, cv2.DIST_L2, 5)
            ret, sure_fg = cv2.threshold(dist_transform, 0.7 * dist_transform.max(), 255, 0)

            sure_fg = np.uint8(sure_fg)
            unknown = cv2.subtract(sure_bg, sure_fg)

            ret, self.markers = cv2.connectedComponents(sure_fg)
            self.markers = self.markers + 1
            self.markers[unknown == 255] = 0

            self.markers = cv2.watershed(self.img, self.markers)
            self.img[self.markers == -1] = [0, 0, 255]

            grain_features = []
            grain_labels = []

            for i in range(1, len(np.unique(self.markers))):
                mask = np.uint8(self.markers == i)
                contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                for cnt in contours:
                    area = cv2.contourArea(cnt)
                    perimeter = cv2.arcLength(cnt, True)
                    x, y, w, h = cv2.boundingRect(cnt)
                    aspect_ratio = float(w) / h
                    compactness = (perimeter ** 2) / area if area != 0 else 0

                    grain_features.append([area, perimeter, aspect_ratio, compactness])
                    grain_labels.append(1 if 500 < area < 5000 else 0)

            if grain_features:
                grain_features = np.array(grain_features)
                grain_labels = np.array(grain_labels)

                # Scale features
                grain_features = self.scaler.fit_transform(grain_features)

                # Train SVM model
                self.svm_model.fit(grain_features, grain_labels)

                # Predict quality of grains
                predictions = self.svm_model.predict(grain_features)

                for idx, prediction in enumerate(predictions):
                    grain_quality = "Good Quality" if prediction >= 0.5 else "Bad Quality"
                    area, perimeter, aspect_ratio, compactness = grain_features[idx]

                    grain_properties = f"Area: {area:.2f}\nPerimeter: {perimeter:.2f}\nAspect Ratio: {aspect_ratio:.2f}\nCompactness: {compactness:.2f}\nQuality: {grain_quality}"
                    self.result_label.config(text=grain_properties)

                    if 0.5 < aspect_ratio < 2:  
                        self.quality_label.config(text="Rice Grain Image")
                    else:
                        self.quality_label.config(text="Other Image")

            self.display_image(self.img)
        else:
            messagebox.showerror("Error", "No image loaded")

    def save_image(self):
        if self.annotated_img is not None:
            file_path = filedialog.asksaveasfilename(defaultextension=".png", filetypes=[("PNG files", "*.png")])
            if file_path:
                cv2.imwrite(file_path, cv2.cvtColor(self.annotated_img, cv2.COLOR_BGR2RGB))
                messagebox.showinfo("Info", "Image saved successfully")
        else:
            messagebox.showerror("Error", "No image loaded")

def main():
    root = Tk()
    app = RiceGrainAnalyzer(root)
    root.mainloop()

if _name_ == "_main_":
    main()
